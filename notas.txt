function inicioSesion(jid, password) {
  // Conexión TCP
  const client = net.connect({ host: serverHost, port: serverPort }, () => {
    // Envío del inicio de sesión
    const xmlAuth = `<auth xmlns="urn:ietf:params:xml:ns:xmpp-sasl" mechanism="PLAIN">${Buffer.from(`${jid}\x00${jid}\x00${password}`).toString('base64')}</auth>`;
    client.write(xmlAuth);

    // Envío del inicio de la secuencia XML
    const xmlStream = `<?xml version="1.0" encoding="UTF-8"?><stream:stream xmlns="jabber:client" xmlns:stream="http://etherx.jabber.org/streams" to="${serverHost}" version="1.0">`;
    client.write(xmlStream);

    // Mostrar el menú después de iniciar sesión
    mostrarMenu();
  });

  // Manejo de datos recibidos del servidor XMPP
  client.on('data', (data) => {
    console.log('Datos recibidos del servidor XMPP:', data.toString());

    // Procesar la respuesta del servidor y realizar otras acciones según sea necesario
  });

  // Manejo de errores
  client.on('error', (error) => {
    console.error('Error en la conexión con el servidor XMPP:', error);
  });

  // Cierre de la conexión
  client.on('end', () => {
    console.log('Conexión cerrada con el servidor XMPP');
  });

  // Función para mostrar el menú y pedir la opción al usuario.
  function mostrarMenu() {
    console.log("\n---- Menú de opciones ----");
    console.log("1. Enseñar todos los usuarios/contactos y su estado.");
    console.log("2. Agregar un usuario a mis contactos.");
    console.log("3. Comunicación 1 a 1 con cualquier usuario/contacto.");
    console.log("4. Participar en conversaciones grupales.");
    console.log("5. Definir un mensaje de presencia.");
    console.log("6. Enviar/recibir notificaciones.");
    console.log("7. Enviar/recibir archivos.");
    console.log("8. Salir.");

    // Pidiendo la opción al usuario.
    rl.question('¿Qué opción deseas?: ', (answer) => {
      const option = parseInt(answer);

      switch (option) {
        case 1:
          console.log("Opción 1 seleccionada: Enseñar todos los usuarios/contactos y su estado.");
          // Lógica para la opción 1...
          mostrarMenu();
          break;
        case 2:
          console.log("Opción 2 seleccionada: Agregar un usuario a mis contactos.");
          // Lógica para la opción 2...
          mostrarMenu();
          break;
        case 3:
          console.log("Opción 3 seleccionada: Comunicación 1 a 1 con cualquier usuario/contacto.");
          // Lógica para la opción 3...
          mostrarMenu();
          break;
        case 4:
          console.log("Opción 4 seleccionada: Participar en conversaciones grupales.");
          // Lógica para la opción 4...
          mostrarMenu();
          break;
        case 5:
          console.log("Opción 5 seleccionada: Definir un mensaje de presencia.");
          // Pidiendo el mensaje de presencia.
          rl.question("Ingrese el mensaje de presencia: ", (message) => {
            // Enviando el mensaje de presencia.
            const xmlPresence = `
            <presence from="${jid}/pda">
              <show>xa</show>
              <status>${message}</status>
            </presence>
            `;
            // Envío de datos al servidor XMPP
            client.write(xmlPresence);
            mostrarMenu();
          });
          break;
        case 6:
          console.log("Opción 6 seleccionada: Enviar/recibir notificaciones.");
          // Lógica para la opción 6...
          mostrarMenu();
          break;
        case 7:
          console.log("Opción 7 seleccionada: Enviar/recibir archivos.");
          // Lógica para la opción 7...
          mostrarMenu();
          break;
        case 8:
          console.log("Opción 8 seleccionada: Salir.");
          rl.close();
          client.end(); // Cerrar la conexión antes de salir
          break;
        default:
          console.log("Opción no válida. Por favor, elige una opción válida.");
          mostrarMenu();
          break;
      }
    });
  }

  // Pidiendo la opción al usuario.
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
}

---------------------------------------------------
          // Agregar un usuario a los contactos
          case "2":
            console.log("Agregando un usuario a mis contactos...");
            
            //agregarUsuario()

            // Enviar la consulta para obtener las solicitudes de amistad
            const iq = xml('iq', {
              type: 'get',
              id: 'get_friend_requests',
            }).c('query', {
              xmlns: 'jabber:iq:roster',
            });

            // Enviar el IQ stanza y esperar la respuesta
            const result = await xmpp.send(iq);

            // Procesar la respuesta y extraer las solicitudes de amistad
            const friendRequests = [];
            if (result && result.is('iq') && result.attrs.type === 'result') {
              const query = result.getChild('query', 'jabber:iq:roster');
              if (query) {
                const items = query.getChildren('item');
                items.forEach((item) => {
                  if (item.attrs.ask === 'subscribe') {
                    friendRequests.push(item.attrs.jid);
                  }
                });
              }
            }

            
            // Mostrar las solicitudes de amistad
            if (friendRequests.length > 0) {
              console.log('Solicitudes de amistad recibidas:');
              friendRequests.forEach((friendRequest) => {
                console.log(`- ${friendRequest}`);
              });
            }

---------------------------------------------------------------------------------------------
async getContacts() {
    return new Promise((resolve, reject) => {
      if (!this.xmpp) {
        reject(new Error("Error en conexion, intente de nuevo."));
      }
      
      // creando la stanza para obtener los contactos
      const rosterStanza = xml(
        'iq',
        { type: 'get', id: 'roster' },
        xml('query', { xmlns: 'jabber:iq:roster' })
      );
        
      // Enviar la stanza al servidor
      this.xmpp.send(rosterStanza).catch((err) => {
        reject(new Error('Error al enviar la solicitud de roster.'));
      });
  
      // Evento para recibir la respuesta del roster del servidor
      this.xmpp.on('stanza', (stanza) => {
        if (stanza.is('iq') && stanza.attrs.type === 'result') {
          const query = stanza.getChild('query', 'jabber:iq:roster');
          if (query) {
            const contacts = query.getChildren('item');
  
            let contactList = [];
            contacts.forEach((contact) => {
              const jid = contact.attrs.jid;
              const name = contact.attrs.name || jid;
              const subscription = contact.attrs.subscription;
  
              // Obtener el estado de presencia del contacto (si está disponible)
              const presence = this.xmpp.presences && this.xmpp.presences[jid];
              const status = presence && presence.status ? presence.status : 'Offline';
  
              contactList.push({jid, name, subscription, status});
            });
  
            resolve(contactList);
          }
        }
      });
    });
  }  

  /**
   * getPresence: obtiene el estado de presencia de un contacto.
   * @param {string} jid 
   * @returns show, status
   */
  async getPresence(jid, timeout = 2000, delay = 500) {
    return new Promise((resolve, reject) => {
      if (!this.xmpp) {
        reject(new Error("Error en conexion, intente de nuevo."));
      }
      
      // creando la stanza para obtener el estado de presencia
      const probeStanza = xml(
        "presence",
        { type: "probe", to: jid }
      );
        
      // Enviar la stanza al servidor
      this.xmpp
        .send(probeStanza)
        .then(() => {
          // console.log("Presence probe sent successfully");
        })
        .catch((err) => {
          console.error("Error sending presence probe:", err);
          reject(new Error("Error al enviar la solicitud de presencia."));
        });
  
      const timeoutId = setTimeout(() => {
        reject(new Error("Timeout al recibir la presencia del servidor."));
      }, timeout);
  
      let presence = null;
      
      // Evento para recibir la respuesta del servidor y llenar datos de contacto
      this.xmpp.on("stanza", (stanza) => {
        if (stanza.is("presence")) {
          // console.log("Received presence stanza:", stanza.toString());
          const from = stanza.attrs.from;
          const fromJid = from.split("/")[0];
          if (fromJid === jid) {
            clearTimeout(timeoutId);
            if (stanza.attrs.type === "unavailable") {
              presence = { show: "unavailable", status: null };
            } else {
              let show = stanza.getChildText("show");
              const status = stanza.getChildText("status");
  
              // ver si hay un estado de presencia
              if (show || status) {
                // console.log("show:", show)
                // if para cambiar el estado de presencia a un string
                if(show === null || show === undefined || show === "") {
                  show = "Available";
                }
                else if(show === "away"){
                  show = "Away";
                } else if(show === "xa"){
                  show = "Not Available";
                } else if(show === "dnd"){
                  show = "Busy";
                } else if (show === "unavailable") {
                  show = "Offline";
                }
                presence = { show, status };
              }
            }
          }
        } else if (stanza.is("iq") && stanza.attrs.type === "error") {
          console.log("Received error stanza:", stanza.toString());
          clearTimeout(timeoutId);
          reject(new Error("Error al recibir la presencia del servidor."));
        }
      });
      
      // si no se recibe respuesta del servidor, se envia un objeto vacio
      setTimeout(() => {
        resolve(presence || { show: "Available", status: null });
      }, delay);
    });
  }